{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template creates the stack for project kawspy. Generated by Sigma",
  "Parameters": {
    "lambdaCodeBucketParameter": {
      "Type": "String",
      "Description": "Name of the S3 bucket containing the Lambda deployment package"
    },
    "lambdaCodeKeyParameter": {
      "Type": "String",
      "Description": "S3 key of the Lambda deployment package"
    }
  },
  "Outputs": {
    "sqsKTestSQS": {
      "Description": "URL of SQS queue KTestSQS",
      "Value": "https://sqs.us-east-1.amazonaws.com/318300609668/KTestSQS"
    },
    "apigTestAPIDDBresourceGET": {
      "Description": "URL of TestAPI/DDBresource:GET endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            "0itznun7w3",
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/",
            "prod1",
            "/DDBresource"
          ]
        ]
      }
    },
    "apigTestAPIDDBresourcecheckGET": {
      "Description": "URL of TestAPI/DDBresource/check:GET endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            "0itznun7w3",
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/",
            "prod2",
            "/DDBresource/check"
          ]
        ]
      }
    },
    "snsNotifications": {
      "Description": "ARN of SNS topic Notifications",
      "Value": "arn:aws:sns:us-east-1:318300609668:Notifications"
    },
    "kawspy": {
      "Description": "ARN of Lambda function kawspy",
      "Value": {
        "Fn::GetAtt": [
          "kawspy",
          "Arn"
        ]
      }
    },
    "ksubilamdainsub": {
      "Description": "ARN of Lambda function lamdainsub",
      "Value": {
        "Fn::GetAtt": [
          "ksubilamdainsub",
          "Arn"
        ]
      }
    }
  },
  "Resources": {
    "apigTestAPIDDBresourceGET": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": "0itznun7w3",
        "ResourceId": "0aenia",
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": "200"
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${kawspy.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200"
            }
          ]
        }
      }
    },
    "apigTestAPIDDBresourcecheckGET": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": "0itznun7w3",
        "ResourceId": "70q21i",
        "HttpMethod": "GET",
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ],
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${kawspy.Arn}/invocations"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ]
        }
      }
    },
    "apigTestAPIDDBresourcecheckCors": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": "0itznun7w3",
        "ResourceId": "70q21i",
        "HttpMethod": "OPTIONS",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'*'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"statusCode\": 200}"
          }
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "kawspy": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "kawspy",
        "Description": "Invokes functions defined in kawspy.py in project kawspy. Generated by Sigma.",
        "Code": {
          "S3Bucket": {
            "Ref": "lambdaCodeBucketParameter"
          },
          "S3Key": {
            "Ref": "lambdaCodeKeyParameter"
          }
        },
        "MemorySize": 128,
        "Handler": "kawspy.handler",
        "Timeout": 25,
        "Runtime": "python3.8",
        "Layers": [],
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Role": {
          "Fn::GetAtt": [
            "kawspyExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "kumu": "var1",
            "SIGMA_AWS_ACC_ID": {
              "Ref": "AWS::AccountId"
            }
          }
        }
      }
    },
    "kawspyExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "kawspyPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Scan"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:318300609668:table/KChineseAnimal"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:GetTopicAttributes"
                  ],
                  "Resource": "arn:aws:sns:us-east-1:318300609668:Notifications"
                },
                {
                  "Effect": "Allow",
                  "Action": "iotanalytics:BatchPutMessage",
                  "Resource": {
                    "Fn::Sub": "arn:aws:iotanalytics:${AWS::Region}:${AWS::AccountId}:channel/my_channel"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:GetQueueAttributes",
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage"
                  ],
                  "Resource": "arn:aws:sqs:us-east-1:318300609668:KTestSQS"
                }
              ]
            }
          }
        ]
      }
    },
    "s3cloud9KtestPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "kawspy"
        },
        "SourceArn": "arn:aws:s3:::cloud9-ktest",
        "Principal": "s3.amazonaws.com"
      }
    },
    "sqsKTestSQSTriggerkawspy0": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "BatchSize": "10",
        "EventSourceArn": "arn:aws:sqs:us-east-1:318300609668:KTestSQS",
        "FunctionName": {
          "Ref": "kawspy"
        }
      }
    },
    "sqsKTestSQSPermissionkawspy": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "kawspy"
        },
        "SourceArn": "arn:aws:sqs:us-east-1:318300609668:KTestSQS",
        "Principal": "sqs.amazonaws.com"
      }
    },
    "apigTestAPIDDBresourceGETPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "kawspy"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/${__Method__}${__Path__}",
            {
              "__Method__": "GET",
              "__Path__": "/DDBresource",
              "__ApiId__": "0itznun7w3"
            }
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "apigTestAPIDDBresourcecheckGETPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "kawspy"
        },
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/${__Method__}${__Path__}",
            {
              "__Method__": "GET",
              "__Path__": "/DDBresource/check",
              "__ApiId__": "0itznun7w3"
            }
          ]
        },
        "Principal": "apigateway.amazonaws.com"
      }
    },
    "s3cloud9KtestCli0kawspy": {
      "Type": "Custom::cli2cloudformation",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "cli2cloudformationkawspy",
            "Arn"
          ]
        },
        "CliCommandCreate": {
          "Fn::Join": [
            "",
            [
              "aws s3api put-bucket-notification-configuration --bucket cloud9-ktest --notification-configuration ",
              "\"LambdaFunctionConfigurations=[",
              {
                "Fn::Join": [
                  ",",
                  [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "{Events=[s3:ObjectCreated:*],LambdaFunctionArn=",
                          {
                            "Fn::GetAtt": [
                              "kawspy",
                              "Arn"
                            ]
                          },
                          "}"
                        ]
                      ]
                    }
                  ]
                ]
              },
              "]\""
            ]
          ]
        },
        "CliCommandDelete": "aws s3api put-bucket-notification-configuration --bucket cloud9-ktest --notification-configuration '{}'",
        "CliCommandUpdate": {
          "Fn::Join": [
            "",
            [
              "aws s3api put-bucket-notification-configuration --bucket cloud9-ktest --notification-configuration ",
              "\"LambdaFunctionConfigurations=[",
              {
                "Fn::Join": [
                  ",",
                  [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "{Events=[s3:ObjectCreated:*],LambdaFunctionArn=",
                          {
                            "Fn::GetAtt": [
                              "kawspy",
                              "Arn"
                            ]
                          },
                          "}"
                        ]
                      ]
                    }
                  ]
                ]
              },
              "]\""
            ]
          ]
        }
      }
    },
    "ksubilamdainsub": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "lamdainsub",
        "Description": "Invokes functions defined in ksubi/lamdainsub.py in project kawspy. Generated by Sigma.",
        "Code": {
          "S3Bucket": {
            "Ref": "lambdaCodeBucketParameter"
          },
          "S3Key": {
            "Ref": "lambdaCodeKeyParameter"
          }
        },
        "MemorySize": 256,
        "Handler": "ksubi/lamdainsub.handler",
        "Timeout": 60,
        "Runtime": "python3.8",
        "Layers": [],
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Role": {
          "Fn::GetAtt": [
            "ksubilamdainsubExecutionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "kumu": "var1",
            "SIGMA_AWS_ACC_ID": {
              "Ref": "AWS::AccountId"
            }
          }
        }
      }
    },
    "ksubilamdainsubExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "alexaSK15970ba19cb6ksubilamdainsubPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "ksubilamdainsub"
        },
        "Principal": "alexa-appkit.amazon.com",
        "EventSourceToken": "amzn1.ask.skill.15970ba1-9cb6-4f6f-9b22-e6d5710707f0"
      }
    },
    "cli2cloudformationkawspy": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "cli2cloudformationkawspy",
        "Description": "This is a utility lambda generated by Sigma, for bringing CF-unsupported operations into the CF template. Kudos to https://github.com/lucioveloso/cli2cloudformation",
        "Code": {
          "S3Bucket": "resources.us-east-2.sigma.slappforge.com",
          "S3Key": "CF/cf_shell_v2.zip"
        },
        "MemorySize": 128,
        "Handler": "index.lambda_handler",
        "Timeout": 60,
        "Runtime": "python3.8",
        "Layers": [],
        "TracingConfig": {
          "Mode": "PassThrough"
        },
        "Role": {
          "Fn::GetAtt": [
            "cli2cloudformationkawspyExecutionRole",
            "Arn"
          ]
        }
      }
    },
    "cli2cloudformationkawspyExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "cli2cloudformationkawspyPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutBucketNotification"
                  ],
                  "Resource": "arn:aws:s3:::cloud9-ktest"
                }
              ]
            }
          }
        ]
      }
    },
    "apigTestAPIDeployment1627912367397": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": "0itznun7w3",
        "Description": "An API deployment generated by Sigma for API TestAPI",
        "StageName": "prod1"
      },
      "DependsOn": [
        "apigTestAPIDDBresourceGET",
        "apigTestAPIDDBresourcecheckGET",
        "apigTestAPIDDBresourcecheckCors"
      ]
    }
  }
}